name: 20 Deploy to Azure

on:
  workflow_dispatch:
  workflow_call:

jobs:
    deploy:
        environment: testing
        runs-on: ubuntu-latest
        steps: 
            - name: Check out the repository
              uses: actions/checkout@v4
            - name: Install Dependencies
              run: | 
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            - name: Download Artifacts
              uses: actions/download-artifact@v4
              with:
                name: daemonset
                path: daemonset.yaml
            - name: Install defender
              run: |
                echo "Logging in into Azure"
                az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_APP_KEY }} --tenant ${{ secrets.AZURE_TENANT_ID }} > /dev/null

                #Turn SUBSCRIPTIONS environment variable into an array
                IFS=',' read -r -a subscriptions <<< ${{ secrets.SUBSCRIPTIONS }}
                skipped_clusters=()

                #Verify if cluster has the defender installed in the subscriptions
                for subscription in "${subscriptions[@]}"
                do
                    az account set --subscription $subscription
                    echo "Reading AKS Clusters. Subscription ID: $subscription"
                    az aks list --only-show-errors | jq -c '.[]' | while read cluster
                    do
                        cluster_name=$(echo $cluster | jq -r '.name')
                        resource_group=$(echo $cluster | jq -r '.resourceGroup')
                        tag=$(echo $cluster | jq -r --arg skip "${{ secrets.SKIP_TAG }}" '.tags[$skip]')

                        if [ $tag == "no" ]
                        then
                            echo "Skipping cluster: ${cluster_name}. Tag '$SKIP_TAG' is set to 'no'."
                        else
                            echo "Accessing to cluster: ${cluster_name}"
                            response=$(az aks command invoke --resource-group ${resource_group} --name ${cluster_name}  --command "kubectl get ds twistlock-defender-ds -n twistlock" -o json | jq -r '.exitCode')
                            if [ $response -ne 0 ] 
                            then
                                echo "Cluster ${cluster_name} doesn't have the defender installed. Installing defender"
                                az aks command invoke --resource-group ${resource_group} --name ${cluster_name}  --command "kubectl create ns twistlock"
                                az aks command invoke --resource-group ${resource_group} --name ${cluster_name} --command "kubectl apply -f daemonset.yaml" -f daemonset.yaml
                            else
                                echo "Cluster ${cluster_name} already has the defender installed. Nothing to be done"
                            fi
                        fi
                    done
                done
                echo "Done"             